// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CRM.UITest.Scripts.CRMRatingLogic
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CRMRatingLogicAccessorialCalculationsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "CRM Rating Logic Accessorial Calculations.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CRM Rating Logic Accessorial Calculations", "\tWhen calculating rates for customers with crm rating logic on\r\n\tGet default acce" +
                    "ssorial charges based on which are available", ProgrammingLanguage.CSharp, new string[] {
                        "NinjaSprint34",
                        "Regression",
                        "108081"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CRM Rating Logic Accessorial Calculations")))
            {
                global::CRM.UITest.Scripts.CRMRatingLogic.CRMRatingLogicAccessorialCalculationsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("108081 Customer with customer level accessorials add default accessorial costing " +
            "to calculation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CRM Rating Logic Accessorial Calculations")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NinjaSprint34")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("108081")]
        public virtual void _108081CustomerWithCustomerLevelAccessorialsAddDefaultAccessorialCostingToCalculation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("108081 Customer with customer level accessorials add default accessorial costing " +
                    "to calculation", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccessorialCode",
                        "AccessorialValue",
                        "GainshareType",
                        "Scac"});
            table1.AddRow(new string[] {
                        "IPU",
                        "20",
                        "Set flat amount",
                        ""});
            table1.AddRow(new string[] {
                        "IDL",
                        "30",
                        "Set flat amount",
                        ""});
            table1.AddRow(new string[] {
                        "APPT",
                        "50",
                        "Set flat amount",
                        "FXFE"});
#line 7
 testRunner.Given("I have the customer \"GS - Ninja Customer\" which has the accessorials set up at th" +
                    "e customer level", ((string)(null)), table1, "Given ");
#line 12
 testRunner.When("I send a rate request for \"GS - Ninja Customer\" with the following values \"LTL\", " +
                    "\"Miami\", \"33126\", \"FL\", \"USA\", \"Tempe\", \"85282\", \"AZ\", \"USA\", \"50\", \"1\", \"1\", \"t" +
                    "estentry@test.com\", \"External\", \"Inside Pickup,Inside Delivery,Appointment\", \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccessorialName",
                        "AccessorialCode",
                        "AccessorialValue",
                        "Scac"});
            table2.AddRow(new string[] {
                        "Inside Pickup",
                        "IPU",
                        "20.00",
                        ""});
            table2.AddRow(new string[] {
                        "Inside Delivery",
                        "IDL",
                        "30.00",
                        ""});
            table2.AddRow(new string[] {
                        "Appointment",
                        "APPT",
                        "50.00",
                        "FXFE"});
#line 13
 testRunner.Then("the following accessorials will have the values", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("108081 Sub Customer with primary customer level accessorials add default accessor" +
            "ial costing to calculation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CRM Rating Logic Accessorial Calculations")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NinjaSprint34")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("108081")]
        public virtual void _108081SubCustomerWithPrimaryCustomerLevelAccessorialsAddDefaultAccessorialCostingToCalculation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("108081 Sub Customer with primary customer level accessorials add default accessor" +
                    "ial costing to calculation", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccessorialCode",
                        "AccessorialValue",
                        "GainshareType",
                        "Scac"});
            table3.AddRow(new string[] {
                        "IPU",
                        "50",
                        "Set flat amount",
                        ""});
            table3.AddRow(new string[] {
                        "IDL",
                        "60",
                        "Set flat amount",
                        ""});
            table3.AddRow(new string[] {
                        "APPT",
                        "50",
                        "Set flat amount",
                        "FXFE"});
#line 19
 testRunner.Given("I have a sub customer \"GS - Ninja Customer\" which has the accessorials set up at " +
                    "the primary customer \"108081 Ninja Primary Customer\" level", ((string)(null)), table3, "Given ");
#line 24
 testRunner.When("I send a rate request for \"GS - Ninja Customer\" with the following values \"LTL\", " +
                    "\"Miami\", \"33126\", \"FL\", \"USA\", \"Tempe\", \"85282\", \"AZ\", \"USA\", \"50\", \"1\", \"1\", \"t" +
                    "estentry@test.com\", \"External\", \"Inside Pickup,Inside Delivery,Appointment\", \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccessorialName",
                        "AccessorialCode",
                        "AccessorialValue",
                        "Scac"});
            table4.AddRow(new string[] {
                        "Inside Pickup",
                        "IPU",
                        "50.00",
                        ""});
            table4.AddRow(new string[] {
                        "Inside Delivery",
                        "IDL",
                        "60.00",
                        ""});
            table4.AddRow(new string[] {
                        "Appointment",
                        "APPT",
                        "50.00",
                        "FXFE"});
#line 25
 testRunner.Then("the following accessorials will have the values", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("108081 Customer with station level accessorials add default accessorial costing t" +
            "o calculation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CRM Rating Logic Accessorial Calculations")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NinjaSprint34")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("108081")]
        public virtual void _108081CustomerWithStationLevelAccessorialsAddDefaultAccessorialCostingToCalculation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("108081 Customer with station level accessorials add default accessorial costing t" +
                    "o calculation", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccessorialName",
                        "AccessorialCode",
                        "AccessorialValue",
                        "GainshareType",
                        "Scac"});
            table5.AddRow(new string[] {
                        "Inside Pickup",
                        "IPU",
                        "100",
                        "Set flat amount",
                        ""});
            table5.AddRow(new string[] {
                        "Inside Delivery",
                        "IDL",
                        "300",
                        "Set flat amount",
                        ""});
            table5.AddRow(new string[] {
                        "Appointment",
                        "APPT",
                        "50",
                        "Set flat amount",
                        "FXFE"});
#line 32
 testRunner.Given("I have the customer \"GS - Ninja Customer\" which has the accessorials set up at th" +
                    "e station level", ((string)(null)), table5, "Given ");
#line 37
 testRunner.When("I send a rate request for \"GS - Ninja Customer\" with the following values \"LTL\", " +
                    "\"Miami\", \"33126\", \"FL\", \"USA\", \"Tempe\", \"85282\", \"AZ\", \"USA\", \"50\", \"1\", \"1\", \"t" +
                    "estentry@test.com\", \"External\", \"Inside Pickup,Inside Delivery,Appointment\", \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccessorialName",
                        "AccessorialCode",
                        "AccessorialValue",
                        "Scac"});
            table6.AddRow(new string[] {
                        "Inside Pickup",
                        "IPU",
                        "100.00",
                        ""});
            table6.AddRow(new string[] {
                        "Inside Delivery",
                        "IDL",
                        "300.00",
                        ""});
            table6.AddRow(new string[] {
                        "Appointment",
                        "APPT",
                        "50.00",
                        "FXFE"});
#line 38
 testRunner.Then("the following accessorials will have the values", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("108081 Customer with corporate level accessorials add default accessorial costing" +
            " to calculation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CRM Rating Logic Accessorial Calculations")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NinjaSprint34")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("108081")]
        public virtual void _108081CustomerWithCorporateLevelAccessorialsAddDefaultAccessorialCostingToCalculation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("108081 Customer with corporate level accessorials add default accessorial costing" +
                    " to calculation", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccessorialName",
                        "AccessorialCode",
                        "AccessorialValue",
                        "GainshareType",
                        "Scac"});
            table7.AddRow(new string[] {
                        "Inside Pickup",
                        "IPU",
                        "70",
                        "Set flat amount",
                        ""});
            table7.AddRow(new string[] {
                        "Inside Delivery",
                        "IDL",
                        "75",
                        "Set flat amount",
                        ""});
            table7.AddRow(new string[] {
                        "Appointment",
                        "APPT",
                        "50",
                        "Set flat amount",
                        "FXFE"});
#line 45
 testRunner.Given("I have the customer \"GS - Ninja Customer\" which has the accessorials set up at th" +
                    "e corporate level", ((string)(null)), table7, "Given ");
#line 50
 testRunner.When("I send a rate request for \"GS - Ninja Customer\" with the following values \"LTL\", " +
                    "\"Miami\", \"33126\", \"FL\", \"USA\", \"Tempe\", \"85282\", \"AZ\", \"USA\", \"50\", \"1\", \"1\", \"t" +
                    "estentry@test.com\", \"External\", \"Inside Pickup,Inside Delivery,Appointment\", \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccessorialName",
                        "AccessorialCode",
                        "AccessorialValue",
                        "Scac"});
            table8.AddRow(new string[] {
                        "Inside Pickup",
                        "IPU",
                        "70.00",
                        ""});
            table8.AddRow(new string[] {
                        "Inside Delivery",
                        "IDL",
                        "75.00",
                        ""});
            table8.AddRow(new string[] {
                        "Appointment",
                        "APPT",
                        "50.00",
                        "FXFE"});
#line 51
 testRunner.Then("the following accessorials will have the values", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("108081 sub Customer with station level accessorials add default accessorial costi" +
            "ng to calculation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CRM Rating Logic Accessorial Calculations")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NinjaSprint34")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("108081")]
        public virtual void _108081SubCustomerWithStationLevelAccessorialsAddDefaultAccessorialCostingToCalculation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("108081 sub Customer with station level accessorials add default accessorial costi" +
                    "ng to calculation", ((string[])(null)));
#line 57
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccessorialName",
                        "AccessorialCode",
                        "AccessorialValue",
                        "GainshareType",
                        "Scac"});
            table9.AddRow(new string[] {
                        "Inside Pickup",
                        "IPU",
                        "100",
                        "Set flat amount",
                        ""});
            table9.AddRow(new string[] {
                        "Inside Delivery",
                        "IDL",
                        "300",
                        "Set flat amount",
                        ""});
            table9.AddRow(new string[] {
                        "Appointment",
                        "APPT",
                        "50",
                        "Set flat amount",
                        "FXFE"});
#line 58
 testRunner.Given("I have the sub customer \"GS - Ninja Customer\" for primary customer \"108081 Ninja " +
                    "Primary Customer\" which has the accessorials set up at the station level", ((string)(null)), table9, "Given ");
#line 63
 testRunner.When("I send a rate request for \"GS - Ninja Customer\" with the following values \"LTL\", " +
                    "\"Miami\", \"33126\", \"FL\", \"USA\", \"Tempe\", \"85282\", \"AZ\", \"USA\", \"50\", \"1\", \"1\", \"t" +
                    "estentry@test.com\", \"External\", \"Inside Pickup,Inside Delivery,Appointment\", \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccessorialName",
                        "AccessorialCode",
                        "AccessorialValue",
                        "Scac"});
            table10.AddRow(new string[] {
                        "Inside Pickup",
                        "IPU",
                        "100.00",
                        ""});
            table10.AddRow(new string[] {
                        "Inside Delivery",
                        "IDL",
                        "300.00",
                        ""});
            table10.AddRow(new string[] {
                        "Appointment",
                        "APPT",
                        "50.00",
                        "FXFE"});
#line 64
 testRunner.Then("the following accessorials will have the values", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("108081 sub Customer with corporate level accessorials add default accessorial cos" +
            "ting to calculation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CRM Rating Logic Accessorial Calculations")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NinjaSprint34")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("108081")]
        public virtual void _108081SubCustomerWithCorporateLevelAccessorialsAddDefaultAccessorialCostingToCalculation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("108081 sub Customer with corporate level accessorials add default accessorial cos" +
                    "ting to calculation", ((string[])(null)));
#line 70
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccessorialName",
                        "AccessorialCode",
                        "AccessorialValue",
                        "GainshareType",
                        "Scac"});
            table11.AddRow(new string[] {
                        "Inside Pickup",
                        "IPU",
                        "70",
                        "Set flat amount",
                        ""});
            table11.AddRow(new string[] {
                        "Inside Delivery",
                        "IDL",
                        "75",
                        "Set flat amount",
                        ""});
            table11.AddRow(new string[] {
                        "Appointment",
                        "APPT",
                        "50",
                        "Set flat amount",
                        "FXFE"});
#line 71
 testRunner.Given("I have the sub customer \"GS - Ninja Customer\" for primary customer \"108081 Ninja " +
                    "Primary Customer\" which has the accessorials set up at the corporate level", ((string)(null)), table11, "Given ");
#line 76
 testRunner.When("I send a rate request for \"GS - Ninja Customer\" with the following values \"LTL\", " +
                    "\"Miami\", \"33126\", \"FL\", \"USA\", \"Tempe\", \"85282\", \"AZ\", \"USA\", \"50\", \"1\", \"1\", \"t" +
                    "estentry@test.com\", \"External\", \"Inside Pickup,Inside Delivery,Appointment\", \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccessorialName",
                        "AccessorialCode",
                        "AccessorialValue",
                        "Scac"});
            table12.AddRow(new string[] {
                        "Inside Pickup",
                        "IPU",
                        "70.00",
                        ""});
            table12.AddRow(new string[] {
                        "Inside Delivery",
                        "IDL",
                        "75.00",
                        ""});
            table12.AddRow(new string[] {
                        "Appointment",
                        "APPT",
                        "50.00",
                        "FXFE"});
#line 77
 testRunner.Then("the following accessorials will have the values", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
