// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CRM.UITest.Scripts.MaintenanceTools.ProductProtectionSetting
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class MaintenanceToolsProductProtectionFunctionalityFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Maintenance Tools_Product Protection Functionality.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "MaintenanceToolsProductProtectionFunctionality", null, ProgrammingLanguage.CSharp, new string[] {
                        "MaintanceToolsProductProtectionSetting",
                        "18311",
                        "Sprint62"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "MaintenanceToolsProductProtectionFunctionality")))
            {
                CRM.UITest.Scripts.MaintenanceTools.ProductProtectionSetting.MaintenanceToolsProductProtectionFunctionalityFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void VerifyTheProductProtectionOptionAndThePageLayout(string scenario, string username, string password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GUI",
                    "Acceptance"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the Product Protection option and the page layout", @__tags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
    testRunner.Given(string.Format("I am a DLS system admin user and login into application with valid {0},{1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
    testRunner.When("I Click on the Maintenance tool icon in the navigation menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("I will have a Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 12
 testRunner.And("I click on Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("I will arrive on the Product Protection settings page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("I can see Product Protection section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify the Product Protection option and the page layout: S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MaintenanceToolsProductProtectionFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("MaintanceToolsProductProtectionSetting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18311")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint62")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Acceptance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Scenario", "S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:username", "crmSystemAdmin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:password", "Te$t1234")]
        public virtual void VerifyTheProductProtectionOptionAndThePageLayout_S1()
        {
            this.VerifyTheProductProtectionOptionAndThePageLayout("S1", "crmSystemAdmin", "Te$t1234", ((string[])(null)));
#line hidden
        }
        
        public virtual void VerifyFieldsNameWithinProductProtectionSection(string scenario, string username, string password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GUI",
                    "Acceptance"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify fields name within Product Protection section", @__tags);
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
    testRunner.Given(string.Format("I am a DLS system admin user and login into application with valid {0},{1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
    testRunner.When("I Click on the Maintenance tool icon in the navigation menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.Then("I will have a Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
 testRunner.And("I click on Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.And("I will arrive on the Product Protection settings page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.And("I can see Product Protection section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.And("I can see select a station option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.And("I can see select coustomer account serach box", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.And("I can see save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify fields name within Product Protection section: S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MaintenanceToolsProductProtectionFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("MaintanceToolsProductProtectionSetting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18311")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint62")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Acceptance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Scenario", "S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:username", "crmSystemAdmin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:password", "Te$t1234")]
        public virtual void VerifyFieldsNameWithinProductProtectionSection_S1()
        {
            this.VerifyFieldsNameWithinProductProtectionSection("S1", "crmSystemAdmin", "Te$t1234", ((string[])(null)));
#line hidden
        }
        
        public virtual void VerifyValidationMessageIfUserDidnTSelectStationName(string scenario, string username, string password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GUI",
                    "Acceptance"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify validation message if user didn\'t select station name", @__tags);
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
    testRunner.Given(string.Format("I am a DLS system admin user and login into application with valid {0},{1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
    testRunner.When("I Click on the Maintenance tool icon in the navigation menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("I will have a Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
 testRunner.And("I click on Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.And("I have clicked on save button without enter station name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("User should be presented with error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify validation message if user didn\'t select station name: S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MaintenanceToolsProductProtectionFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("MaintanceToolsProductProtectionSetting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18311")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint62")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Acceptance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Scenario", "S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:username", "crmSystemAdmin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:password", "Te$t1234")]
        public virtual void VerifyValidationMessageIfUserDidnTSelectStationName_S1()
        {
            this.VerifyValidationMessageIfUserDidnTSelectStationName("S1", "crmSystemAdmin", "Te$t1234", ((string[])(null)));
#line hidden
        }
        
        public virtual void VerifyValidationMessageIfUserDidnTSelectCustomerName(string scenario, string username, string password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GUI",
                    "Acceptance"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify validation message if user didn\'t select customer name", @__tags);
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
    testRunner.Given(string.Format("I am a DLS system admin user and login into application with valid {0},{1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
    testRunner.When("I Click on the Maintenance tool icon in the navigation menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
 testRunner.Then("I will have a Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 53
 testRunner.And("I click on Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.And("I have clicked on save button wihout enter customer name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
 testRunner.And("User should be presented with error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify validation message if user didn\'t select customer name: S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MaintenanceToolsProductProtectionFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("MaintanceToolsProductProtectionSetting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18311")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint62")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Acceptance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Scenario", "S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:username", "crmSystemAdmin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:password", "Te$t1234")]
        public virtual void VerifyValidationMessageIfUserDidnTSelectCustomerName_S1()
        {
            this.VerifyValidationMessageIfUserDidnTSelectCustomerName("S1", "crmSystemAdmin", "Te$t1234", ((string[])(null)));
#line hidden
        }
        
        public virtual void VerifyDisplayedStationNameUnderStationDropDown(string scenario, string username, string password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GUI",
                    "Acceptance",
                    "DBVerification"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify displayed station name under station drop down", @__tags);
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
    testRunner.Given(string.Format("I am a DLS system admin user and login into application with valid {0},{1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 65
    testRunner.When("I Click on the Maintenance tool icon in the navigation menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
 testRunner.Then("I will have a Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 67
 testRunner.And("I click on Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.Then("I have clicked on station drop down", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 69
 testRunner.And("Station name displayed in UI should match with database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify displayed station name under station drop down: S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MaintenanceToolsProductProtectionFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("MaintanceToolsProductProtectionSetting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18311")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint62")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Acceptance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DBVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Scenario", "S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:username", "crmSystemAdmin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:password", "Te$t1234")]
        public virtual void VerifyDisplayedStationNameUnderStationDropDown_S1()
        {
            this.VerifyDisplayedStationNameUnderStationDropDown("S1", "crmSystemAdmin", "Te$t1234", ((string[])(null)));
#line hidden
        }
        
        public virtual void VerifyDisplayedCustomerNameBasedOnAssociatedStationName(string scenario, string username, string password, string station_Name, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GUI",
                    "Acceptance@DB"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify displayed customer name based on associated station name", @__tags);
#line 75
this.ScenarioSetup(scenarioInfo);
#line 76
    testRunner.Given(string.Format("I am a DLS system admin user and login into application with valid {0},{1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 77
    testRunner.When("I Click on the Maintenance tool icon in the navigation menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 78
 testRunner.Then("I will have a Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 79
 testRunner.And("I click on Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
 testRunner.Then("I have clicked on station drop down", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 81
 testRunner.And(string.Format("I have selected any station {0}", station_Name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.Then(string.Format("Click on customer account text box list of customer name should be displayed asso" +
                        "ciated to selected station name {0}", station_Name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify displayed customer name based on associated station name: S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MaintenanceToolsProductProtectionFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("MaintanceToolsProductProtectionSetting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18311")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint62")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Acceptance@DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Scenario", "S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:username", "crmSystemAdmin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:station_name", "NewStation12132016")]
        public virtual void VerifyDisplayedCustomerNameBasedOnAssociatedStationName_S1()
        {
            this.VerifyDisplayedCustomerNameBasedOnAssociatedStationName("S1", "crmSystemAdmin", "Te$t1234", "NewStation12132016", ((string[])(null)));
#line hidden
        }
        
        public virtual void TryToSelectMultipleAccountForTheStation(string scenario, string username, string password, string station_Name, string account_Name, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GUI",
                    "Acceptance"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to select multiple account for the station", @__tags);
#line 89
this.ScenarioSetup(scenarioInfo);
#line 90
    testRunner.Given(string.Format("I am a DLS system admin user and login into application with valid {0},{1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 91
    testRunner.When("I Click on the Maintenance tool icon in the navigation menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 92
 testRunner.Then("I will have a Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 93
 testRunner.And("I click on Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.And("I have clicked on station drop down", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.And(string.Format("I have selected any station {0}", station_Name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.And(string.Format("Try to select multiple account for the selected station {0}", account_Name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Try to select multiple account for the station: S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MaintenanceToolsProductProtectionFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("MaintanceToolsProductProtectionSetting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18311")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint62")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Acceptance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Scenario", "S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:username", "crmSystemAdmin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:station_name", "NewStation12132016")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account_name", "testmanualportal,Autotest_1")]
        public virtual void TryToSelectMultipleAccountForTheStation_S1()
        {
            this.TryToSelectMultipleAccountForTheStation("S1", "crmSystemAdmin", "Te$t1234", "NewStation12132016", "testmanualportal,Autotest_1", ((string[])(null)));
#line hidden
        }
        
        public virtual void VerifySavedCustomerAccountsWithinGridInWhichTheProductProtectionOptionHasBeenApplied(string scenario, string username, string password, string station_Name, string account_Name, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GUI",
                    "Acceptance"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify saved customer accounts within grid in which the Product Protection option" +
                    " has been applied", @__tags);
#line 102
this.ScenarioSetup(scenarioInfo);
#line 103
    testRunner.Given(string.Format("I am a DLS system admin user and login into application with valid {0},{1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 104
    testRunner.When("I Click on the Maintenance tool icon in the navigation menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 105
 testRunner.Then("I will have a Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 106
 testRunner.And("I click on Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
 testRunner.Then("I have clicked on station drop down", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 108
 testRunner.Then(string.Format("I have selected any station {0}", station_Name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 109
 testRunner.And(string.Format("Try to select multiple account for the selected station {0}", account_Name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
 testRunner.And(string.Format("I have clicked on save button and account should be listed as Non default custome" +
                        "r{0}", account_Name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify saved customer accounts within grid in which the Product Protection option" +
            " has been applied: S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MaintenanceToolsProductProtectionFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("MaintanceToolsProductProtectionSetting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18311")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint62")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Acceptance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Scenario", "S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:username", "crmSystemAdmin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:station_name", "NewStation12132016")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:account_name", "testmanualportal")]
        public virtual void VerifySavedCustomerAccountsWithinGridInWhichTheProductProtectionOptionHasBeenApplied_S1()
        {
            this.VerifySavedCustomerAccountsWithinGridInWhichTheProductProtectionOptionHasBeenApplied("S1", "crmSystemAdmin", "Te$t1234", "NewStation12132016", "testmanualportal", ((string[])(null)));
#line hidden
        }
        
        public virtual void VerifyColumnsInProductProtectionGrid(string scenario, string username, string password, string customer_Name, string staiton_Id, string station_Name, string date_Assigned, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GUI",
                    "Acceptance"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify columns in product protection grid", @__tags);
#line 117
 this.ScenarioSetup(scenarioInfo);
#line 118
    testRunner.Given(string.Format("I am a DLS system admin user and login into application with valid {0},{1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 119
    testRunner.When("I Click on the Maintenance tool icon in the navigation menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 120
 testRunner.Then("I will have a Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 121
 testRunner.And("I click on Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.And(string.Format("Verify columns in product protection grid {0},{1},{2},{3}", customer_Name, staiton_Id, station_Name, date_Assigned), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify columns in product protection grid: S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MaintenanceToolsProductProtectionFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("MaintanceToolsProductProtectionSetting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18311")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint62")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Acceptance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Scenario", "S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:username", "crmSystemAdmin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Customer_name", "CUSTOMER NAME")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Staiton_Id", "STATION ID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Station_Name", "STATION NAME")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Date_Assigned", "DATE ASSIGNED")]
        public virtual void VerifyColumnsInProductProtectionGrid_S1()
        {
            this.VerifyColumnsInProductProtectionGrid("S1", "crmSystemAdmin", "Te$t1234", "CUSTOMER NAME", "STATION ID", "STATION NAME", "DATE ASSIGNED", ((string[])(null)));
#line hidden
        }
        
        public virtual void VerifyTheListOfStationsAndCustomerAccountsInWhichTheProductProtectionOptionHasBeenApplied(string scenario, string username, string password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GUI",
                    "Acceptance@DB"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the list of stations and customer accounts in which the Product Protection" +
                    " option has been applied", @__tags);
#line 129
this.ScenarioSetup(scenarioInfo);
#line 130
    testRunner.Given(string.Format("I am a DLS system admin user and login into application with valid {0},{1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 131
    testRunner.When("I Click on the Maintenance tool icon in the navigation menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 132
 testRunner.Then("I will have a Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 133
 testRunner.And("I click on Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 134
 testRunner.Then("Verify account dispalying under Product Protection gird", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify the list of stations and customer accounts in which the Product Protection" +
            " option has been applied: S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MaintenanceToolsProductProtectionFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("MaintanceToolsProductProtectionSetting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18311")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint62")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Acceptance@DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Scenario", "S1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:username", "crmSystemAdmin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:password", "Te$t1234")]
        public virtual void VerifyTheListOfStationsAndCustomerAccountsInWhichTheProductProtectionOptionHasBeenApplied_S1()
        {
            this.VerifyTheListOfStationsAndCustomerAccountsInWhichTheProductProtectionOptionHasBeenApplied("S1", "crmSystemAdmin", "Te$t1234", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify rate caculation for propduct protection customer account")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MaintenanceToolsProductProtectionFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("MaintanceToolsProductProtectionSetting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18311")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint62")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Acceptance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NotAutomated")]
        public virtual void VerifyRateCaculationForPropductProtectionCustomerAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify rate caculation for propduct protection customer account", new string[] {
                        "Acceptance",
                        "NotAutomated",
                        "Ignore"});
#line 140
this.ScenarioSetup(scenarioInfo);
#line 141
    testRunner.Given("I am a DLS system admin user and login into application with valid <username>,<pa" +
                    "ssword>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 142
    testRunner.When("I Click on the Maintenance tool icon in the navigation menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 143
 testRunner.Then("I will have a Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 144
 testRunner.And("I click on Product Protection option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
 testRunner.And("I have clicked on station drop down", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
 testRunner.And("I have selected any station", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
 testRunner.And("Try to select single/multiple account for the selected station", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
 testRunner.And("I have clicked on save button and account should be listed as Non default custome" +
                    "r account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
 testRunner.And("Logout from the application and login into application with exteranl user mapped " +
                    "to above Non default customer account and user must have access quote or shipmen" +
                    "t module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.And("Click on quote or shipment module and enter valaid data in all the fields and nav" +
                    "igate till results page.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
 testRunner.And("Verify Carrier insured rates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
 testRunner.And("And rates should be displayed as per the Non default INS calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
