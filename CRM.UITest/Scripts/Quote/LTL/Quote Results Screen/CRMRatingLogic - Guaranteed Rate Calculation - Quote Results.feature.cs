// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CRM.UITest.Scripts.Quote.LTL.QuoteResultsScreen
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CRMRatingLogic_GuaranteedRateCalculation_QuoteResultsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "CRMRatingLogic - Guaranteed Rate Calculation - Quote Results.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CRMRatingLogic - Guaranteed Rate Calculation - Quote Results", null, ProgrammingLanguage.CSharp, new string[] {
                        "Sprint77",
                        "37940"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CRMRatingLogic - Guaranteed Rate Calculation - Quote Results")))
            {
                global::CRM.UITest.Scripts.Quote.LTL.QuoteResultsScreen.CRMRatingLogic_GuaranteedRateCalculation_QuoteResultsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void VerifyTheRateCustomerChargeWillBeDeterminedByApplyingTheCRMRatingCalculationToTheGuaranteedRateAmount_GuaranteedCRMRatigLogicRate(
                    string username, 
                    string password, 
                    string customer_Name, 
                    string service, 
                    string originCity, 
                    string originZip, 
                    string originState, 
                    string originCountry, 
                    string destinationCity, 
                    string destinationZip, 
                    string destinationState, 
                    string destinationCountry, 
                    string originAccessorials, 
                    string destinationAccessorials, 
                    string classification, 
                    string quantity, 
                    string weight, 
                    string userType, 
                    string calculationType, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "RegressionSuite"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the Rate (customer charge) will be determined by applying the CRM Rating c" +
                    "alculation to the guaranteed rate amount -Guaranteed CRM ratig logic rate", @__tags);
#line 5
 this.ScenarioSetup(scenarioInfo);
#line 6
testRunner.Given(string.Format("I am a DLS user belongs to Gainshare Customer and login into application with val" +
                        "id {0} and {1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
testRunner.When(string.Format("I am on quote results page for Calculating Gauranteed Total Cost{0}, {1}, {2}, {3" +
                        "}, {4}, {5}, {6}, {7}", customer_Name, userType, originZip, destinationZip, classification, quantity, weight, destinationAccessorials), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
testRunner.Then(string.Format("Rate (customer charge) will be determined by applying the CRM Rating calculation " +
                        "to the guaranteed rate amount for the Quote{0}, {1} ,{2}, {3}, {4}, {5}, {6}, {7" +
                        "}, {8}, {9},{10},{11}, {12},{13},{14},{15},{16}", customer_Name, service, originCity, originZip, originState, originCountry, destinationCity, destinationZip, destinationState, destinationCountry, classification, quantity, weight, username, userType, originAccessorials, destinationAccessorials), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify the Rate (customer charge) will be determined by applying the CRM Rating c" +
            "alculation to the guaranteed rate amount -Guaranteed CRM ratig logic rate: teste" +
            "ntry@test.com")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CRMRatingLogic - Guaranteed Rate Calculation - Quote Results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint77")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("37940")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RegressionSuite")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "testentry@test.com")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "testentry@test.com")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Customer_Name", "ZZZ - GS Customer Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Service", "LTL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginCity", "Miami")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginZip", "33126")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginState", "FL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginCountry", "USA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationCity", "Tempe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationZip", "85282")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationState", "AZ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationCountry", "USA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:originAccessorials", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:destinationAccessorials", "COD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Classification", "50")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quantity", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Weight", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:UserType", "External")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CalculationType", "")]
        public virtual void VerifyTheRateCustomerChargeWillBeDeterminedByApplyingTheCRMRatingCalculationToTheGuaranteedRateAmount_GuaranteedCRMRatigLogicRate_TestentryTest_Com()
        {
#line 5
 this.VerifyTheRateCustomerChargeWillBeDeterminedByApplyingTheCRMRatingCalculationToTheGuaranteedRateAmount_GuaranteedCRMRatigLogicRate("testentry@test.com", "Te$t1234", "ZZZ - GS Customer Test", "LTL", "Miami", "33126", "FL", "USA", "Tempe", "85282", "AZ", "USA", "", "COD", "50", "1", "1", "External", "", ((string[])(null)));
#line hidden
        }
        
        public virtual void VerifyTheRateCustomerChargeWillBeDeterminedByApplyingTheCRMRatingCalculationToInsuredTheGuaranteedRateAmount_GuaranteedCRMRatigLogicRate(
                    string username, 
                    string password, 
                    string customer_Name, 
                    string service, 
                    string originCity, 
                    string originZip, 
                    string originState, 
                    string originCountry, 
                    string destinationCity, 
                    string destinationZip, 
                    string destinationState, 
                    string destinationCountry, 
                    string originAccessorials, 
                    string destinationAccessorials, 
                    string classification, 
                    string quantity, 
                    string weight, 
                    string userType, 
                    string calculationType, 
                    string insuredValue, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "RegressionSuite"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the Rate (customer charge) will be determined by applying the CRM Rating c" +
                    "alculation to Insured the guaranteed rate amount -Guaranteed CRM ratig logic rat" +
                    "e", @__tags);
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
testRunner.Given(string.Format("I am a DLS user belongs to Gainshare Customer and login into application with val" +
                        "id {0} and {1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
testRunner.When(string.Format("I am on quote results page for Calculating Gauranteed Total Cost{0}, {1}, {2}, {3" +
                        "}, {4}, {5}, {6}, {7}", customer_Name, userType, originZip, destinationZip, classification, quantity, weight, destinationAccessorials), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
testRunner.And(string.Format("I Entered Insured value in quote results page{0}", insuredValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
testRunner.Then(string.Format("Rate (customer charge) will be determined by applying the CRM Rating calculation " +
                        "to the Insured guaranteed rate amount for Quote{0}, {1} ,{2}, {3}, {4}, {5}, {6}" +
                        ", {7}, {8}, {9},{10},{11}, {12},{13},{14},{15},{16},{17}", customer_Name, service, originCity, originZip, originState, originCountry, destinationCity, destinationZip, destinationState, destinationCountry, classification, quantity, weight, username, userType, originAccessorials, destinationAccessorials, insuredValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify the Rate (customer charge) will be determined by applying the CRM Rating c" +
            "alculation to Insured the guaranteed rate amount -Guaranteed CRM ratig logic rat" +
            "e: testentry@test.com")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CRMRatingLogic - Guaranteed Rate Calculation - Quote Results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint77")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("37940")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RegressionSuite")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "testentry@test.com")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "testentry@test.com")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Customer_Name", "ZZZ - GS Customer Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Service", "LTL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginCity", "Miami")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginZip", "33126")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginState", "FL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginCountry", "USA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationCity", "Tempe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationZip", "85282")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationState", "AZ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationCountry", "USA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:originAccessorials", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:destinationAccessorials", "COD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Classification", "50")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quantity", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Weight", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:UserType", "External")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CalculationType", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InsuredValue", "10")]
        public virtual void VerifyTheRateCustomerChargeWillBeDeterminedByApplyingTheCRMRatingCalculationToInsuredTheGuaranteedRateAmount_GuaranteedCRMRatigLogicRate_TestentryTest_Com()
        {
#line 15
this.VerifyTheRateCustomerChargeWillBeDeterminedByApplyingTheCRMRatingCalculationToInsuredTheGuaranteedRateAmount_GuaranteedCRMRatigLogicRate("testentry@test.com", "Te$t1234", "ZZZ - GS Customer Test", "LTL", "Miami", "33126", "FL", "USA", "Tempe", "85282", "AZ", "USA", "", "COD", "50", "1", "1", "External", "", "10", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
