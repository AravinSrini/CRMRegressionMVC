// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CRM.UITest.Scripts.Quote.LTL.QuoteResultsScreen
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class InsuredValue_ExcludedCarrierS_QuotesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "Insured Value - Excluded Carrier(s) - Quotes.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Insured Value - Excluded Carrier(s) - Quotes", null, ProgrammingLanguage.CSharp, new string[] {
                        "35686",
                        "Sprint76"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Insured Value - Excluded Carrier(s) - Quotes")))
            {
                global::CRM.UITest.Scripts.Quote.LTL.QuoteResultsScreen.InsuredValue_ExcludedCarrierS_QuotesFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void VerifyTheInsuredValueForExcludedCarriersOnQuoteRateResultsPage_Nonguaranteed(
                    string scenario, 
                    string username, 
                    string password, 
                    string customerName, 
                    string service, 
                    string originCity, 
                    string originZip, 
                    string originState, 
                    string originCountry, 
                    string destinationCity, 
                    string destinationZip, 
                    string destinationState, 
                    string destinationCountry, 
                    string oAccessorial, 
                    string dAccessorial, 
                    string classification, 
                    string quantity, 
                    string quantityUNIT, 
                    string weight, 
                    string text, 
                    string insuredvalue, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "RegressionSuite"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the insured value for excluded carriers on quote rate results page_nonguar" +
                    "anteed", @__tags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
testRunner.Given(string.Format("I am a DLS user and login into application with valid {0} and {1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
testRunner.When(string.Format("I am on the quotes results page{0},{1},{2},{3},{4},{5},{6},{7},{8},<UserType>,{9}" +
                        "", customerName, service, originZip, destinationZip, oAccessorial, dAccessorial, classification, quantity, weight, insuredvalue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
testRunner.Then("insured Quote Cost, Save Insured Rate option,Create Insured Shipment option  will" +
                    " not be displayed for carriers which excluded from Insurance All Risk pricing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 9
testRunner.And(string.Format("I will be displayed with{0} in insured rate column for excluded carriers", text), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify the insured value for excluded carriers on quote rate results page_nonguar" +
            "anteed: s1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Insured Value - Excluded Carrier(s) - Quotes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("35686")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint76")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RegressionSuite")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "s1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Scenario", "s1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "zzzext")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CustomerName", "ZZZ - Czar Customer Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Service", "COD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginCity", "Miami")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginZip", "33126")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginState", "FL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginCountry", "USA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationCity", "Tempe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationZip", "85282")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationState", "AZ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationCountry", "USA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OAccessorial", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DAccessorial", "COD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Classification", "50")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quantity", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:QuantityUNIT", "SKD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Weight", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:text", "No insured pricing for this carrier.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:insuredvalue", "100")]
        public virtual void VerifyTheInsuredValueForExcludedCarriersOnQuoteRateResultsPage_Nonguaranteed_S1()
        {
#line 5
this.VerifyTheInsuredValueForExcludedCarriersOnQuoteRateResultsPage_Nonguaranteed("s1", "zzzext", "Te$t1234", "ZZZ - Czar Customer Test", "COD", "Miami", "33126", "FL", "USA", "Tempe", "85282", "AZ", "USA", "", "COD", "50", "1", "SKD", "3", "No insured pricing for this carrier.", "100", ((string[])(null)));
#line hidden
        }
        
        public virtual void VerifyTheInsuredValueForExcludedCarriersOnQuoteRateResultsPage_Guaranteed(
                    string scenario, 
                    string username, 
                    string password, 
                    string customerName, 
                    string service, 
                    string originCity, 
                    string originZip, 
                    string originState, 
                    string originCountry, 
                    string destinationCity, 
                    string destinationZip, 
                    string destinationState, 
                    string destinationCountry, 
                    string oAccessorial, 
                    string dAccessorial, 
                    string classification, 
                    string quantity, 
                    string quantityUNIT, 
                    string weight, 
                    string text, 
                    string insuredvalue, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "RegressionSuite"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the insured value for excluded carriers on quote rate results page_guarant" +
                    "eed", @__tags);
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
testRunner.Given(string.Format("I am a DLS user and login into application with valid {0} and {1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
testRunner.When(string.Format("I am on the quotes results page{0},{1},{2},{3},{4},{5},{6},{7},{8},<UserType>,{9}" +
                        "", customerName, service, originZip, destinationZip, oAccessorial, dAccessorial, classification, quantity, weight, insuredvalue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
testRunner.Then("insured Quote Cost, Save Insured Rate option,Create Insured Shipment option  will" +
                    " not be displayed for carriers which excluded from Insurance All Risk pricing in" +
                    " guaranteed grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 22
testRunner.And(string.Format("I will be displayed with{0} in insured rate column for excluded carriers in guara" +
                        "nteed grid", text), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify the insured value for excluded carriers on quote rate results page_guarant" +
            "eed: s1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Insured Value - Excluded Carrier(s) - Quotes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("35686")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint76")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RegressionSuite")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "s1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Scenario", "s1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "zzzext")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CustomerName", "ZZZ - Czar Customer Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Service", "COD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginCity", "Miami")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginZip", "33126")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginState", "FL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginCountry", "USA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationCity", "Tempe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationZip", "85282")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationState", "AZ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationCountry", "USA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OAccessorial", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DAccessorial", "COD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Classification", "50")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quantity", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:QuantityUNIT", "SKD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Weight", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:text", "No insured pricing for this carrier.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:insuredvalue", "100")]
        public virtual void VerifyTheInsuredValueForExcludedCarriersOnQuoteRateResultsPage_Guaranteed_S1()
        {
#line 18
this.VerifyTheInsuredValueForExcludedCarriersOnQuoteRateResultsPage_Guaranteed("s1", "zzzext", "Te$t1234", "ZZZ - Czar Customer Test", "COD", "Miami", "33126", "FL", "USA", "Tempe", "85282", "AZ", "USA", "", "COD", "50", "1", "SKD", "3", "No insured pricing for this carrier.", "100", ((string[])(null)));
#line hidden
        }
        
        public virtual void VerifyTheInsuredValueForExcludedCarriersOnQuoteRateResultsPage_Insuredvalenteredinresultspage_Nonguaranteed(
                    string scenario, 
                    string username, 
                    string password, 
                    string customerName, 
                    string service, 
                    string originCity, 
                    string originZip, 
                    string originState, 
                    string originCountry, 
                    string destinationCity, 
                    string destinationZip, 
                    string destinationState, 
                    string destinationCountry, 
                    string oAccessorial, 
                    string dAccessorial, 
                    string classification, 
                    string quantity, 
                    string quantityUNIT, 
                    string weight, 
                    string text, 
                    string insuredvalue, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "RegressionSuite"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the insured value for excluded carriers on quote rate results page_insured" +
                    "valenteredinresultspage_nonguaranteed", @__tags);
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
testRunner.Given(string.Format("I am a DLS user and login into application with valid {0} and {1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
testRunner.When(string.Format("am on quotes results page{0},{1},{2},{3},{4},{5},{6},{7},{8},<UserType>,{9}", customerName, service, originZip, destinationZip, oAccessorial, dAccessorial, classification, quantity, weight, insuredvalue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
testRunner.And(string.Format("I entered {0} on results page", insuredvalue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
testRunner.Then("insured Quote Cost, Save Insured Rate option,Create Insured Shipment option  will" +
                    " not be displayed for carriers which excluded from Insurance All Risk pricing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 36
testRunner.And(string.Format("I will be displayed with{0} in insured rate column for excluded carriers", text), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify the insured value for excluded carriers on quote rate results page_insured" +
            "valenteredinresultspage_nonguaranteed: s1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Insured Value - Excluded Carrier(s) - Quotes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("35686")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint76")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RegressionSuite")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "s1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Scenario", "s1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "zzzext")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CustomerName", "ZZZ - Czar Customer Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Service", "COD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginCity", "Miami")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginZip", "33126")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginState", "FL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginCountry", "USA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationCity", "Tempe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationZip", "85282")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationState", "AZ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationCountry", "USA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OAccessorial", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DAccessorial", "COD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Classification", "50")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quantity", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:QuantityUNIT", "SKD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Weight", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:text", "No insured pricing for this carrier.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:insuredvalue", "100")]
        public virtual void VerifyTheInsuredValueForExcludedCarriersOnQuoteRateResultsPage_Insuredvalenteredinresultspage_Nonguaranteed_S1()
        {
#line 31
this.VerifyTheInsuredValueForExcludedCarriersOnQuoteRateResultsPage_Insuredvalenteredinresultspage_Nonguaranteed("s1", "zzzext", "Te$t1234", "ZZZ - Czar Customer Test", "COD", "Miami", "33126", "FL", "USA", "Tempe", "85282", "AZ", "USA", "", "COD", "50", "1", "SKD", "3", "No insured pricing for this carrier.", "100", ((string[])(null)));
#line hidden
        }
        
        public virtual void VerifyTheInsuredValueForExcludedCarriersOnQuoteRateResultsPage_Insuredvalenteredinresultspage_Guaranteed(
                    string scenario, 
                    string username, 
                    string password, 
                    string customerName, 
                    string service, 
                    string originCity, 
                    string originZip, 
                    string originState, 
                    string originCountry, 
                    string destinationCity, 
                    string destinationZip, 
                    string destinationState, 
                    string destinationCountry, 
                    string oAccessorial, 
                    string dAccessorial, 
                    string classification, 
                    string quantity, 
                    string quantityUNIT, 
                    string weight, 
                    string text, 
                    string insuredvalue, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "RegressionSuite"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the insured value for excluded carriers on quote rate results page_insured" +
                    "valenteredinresultspage_guaranteed", @__tags);
#line 45
this.ScenarioSetup(scenarioInfo);
#line 46
testRunner.Given(string.Format("I am a DLS user and login into application with valid {0} and {1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 47
testRunner.When(string.Format("I am on the quotes results page{0},{1},{2},{3},{4},{5},{6},{7},{8},<UserType>,{9}" +
                        "", customerName, service, originZip, destinationZip, oAccessorial, dAccessorial, classification, quantity, weight, insuredvalue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
testRunner.Then("insured Quote Cost, Save Insured Rate option,Create Insured Shipment option  will" +
                    " not be displayed for carriers which excluded from Insurance All Risk pricing in" +
                    " guaranteed grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 49
testRunner.And(string.Format("I will be displayed with{0} in insured rate column for excluded carriers", text), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Verify the insured value for excluded carriers on quote rate results page_insured" +
            "valenteredinresultspage_guaranteed: s1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Insured Value - Excluded Carrier(s) - Quotes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("35686")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint76")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RegressionSuite")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "s1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Scenario", "s1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "zzzext")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CustomerName", "ZZZ - Czar Customer Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Service", "COD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginCity", "Miami")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginZip", "33126")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginState", "FL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginCountry", "USA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationCity", "Tempe")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationZip", "85282")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationState", "AZ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationCountry", "USA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OAccessorial", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DAccessorial", "COD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Classification", "50")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quantity", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:QuantityUNIT", "SKD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Weight", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:text", "No insured pricing for this carrier.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:insuredvalue", "100")]
        public virtual void VerifyTheInsuredValueForExcludedCarriersOnQuoteRateResultsPage_Insuredvalenteredinresultspage_Guaranteed_S1()
        {
#line 45
this.VerifyTheInsuredValueForExcludedCarriersOnQuoteRateResultsPage_Insuredvalenteredinresultspage_Guaranteed("s1", "zzzext", "Te$t1234", "ZZZ - Czar Customer Test", "COD", "Miami", "33126", "FL", "USA", "Tempe", "85282", "AZ", "USA", "", "COD", "50", "1", "SKD", "3", "No insured pricing for this carrier.", "100", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
