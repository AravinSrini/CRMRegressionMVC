// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.0.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CRM.UITest.Scripts.Tracking.TrackingPage_WithoutLogin
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class TrackingPage_TrackingTemplateFunctionality_ExternalUsersFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "Tracking Page - Tracking Template Functionality - External Users.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tracking Page - Tracking Template Functionality - External Users", null, ProgrammingLanguage.CSharp, new string[] {
                        "31879",
                        "Sprint76"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Tracking Page - Tracking Template Functionality - External Users")))
            {
                global::CRM.UITest.Scripts.Tracking.TrackingPage_WithoutLogin.TrackingPage_TrackingTemplateFunctionality_ExternalUsersFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void _31879_TestToVerifyTheUploadFunctionalityWithValidTrackingNumbers(string scenario, string validReferenceNumber, string path, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Functional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("31879_test to verify the upload functionality with valid tracking numbers", @__tags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
testRunner.Given("I am a DLS user and launch crm url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
testRunner.And(string.Format("I enter the \'{0}\' in the search box", validReferenceNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
testRunner.When("I arrive on Tracking details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
testRunner.And("I click on upload button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
testRunner.And(string.Format("I attached the template from \"{0}\"", path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
testRunner.And("I click on submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
testRunner.Then(string.Format("Ishould be able to see the results of tracking numbers for \'{0}\'", path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("31879_test to verify the upload functionality with valid tracking numbers: s1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tracking Page - Tracking Template Functionality - External Users")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("31879")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint76")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Functional")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "s1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:scenario", "s1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:validReferenceNumber", "9900003")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:path", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Allvalidreferences\\ShipmentTracki" +
            "ngTemplate.xlsx")]
        public virtual void _31879_TestToVerifyTheUploadFunctionalityWithValidTrackingNumbers_S1()
        {
#line 5
this._31879_TestToVerifyTheUploadFunctionalityWithValidTrackingNumbers("s1", "9900003", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Allvalidreferences\\ShipmentTracki" +
                    "ngTemplate.xlsx", ((string[])(null)));
#line hidden
        }
        
        public virtual void _31879_TestToVerifyTheUploadFunctionalityWithAllInvalidTrackingNumbersTemplate(string scenario, string validReferenceNumber, string path, string errorforallinvalid, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Functional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("31879_test to verify the upload functionality with all invalid tracking numbers t" +
                    "emplate", @__tags);
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
testRunner.Given("I am a DLS user and launch crm url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
testRunner.And(string.Format("I enter the \'{0}\' in the search box", validReferenceNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
testRunner.When("I arrive on Tracking details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
testRunner.And("I click on upload button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
testRunner.And(string.Format("I attached the template from \"{0}\"", path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
testRunner.And("I click on submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
testRunner.Then(string.Format("Ishould bedisplaying with \'{0}\' popup for all invaliddata", errorforallinvalid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("31879_test to verify the upload functionality with all invalid tracking numbers t" +
            "emplate: s1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tracking Page - Tracking Template Functionality - External Users")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("31879")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint76")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Functional")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "s1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:scenario", "s1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:validReferenceNumber", "LEX83064995")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:path", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Allinvalidrefernces\\ShipmentTrack" +
            "ingTemplate.xlsx")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorforallinvalid", "No data found for entered reference number(s).")]
        public virtual void _31879_TestToVerifyTheUploadFunctionalityWithAllInvalidTrackingNumbersTemplate_S1()
        {
#line 20
this._31879_TestToVerifyTheUploadFunctionalityWithAllInvalidTrackingNumbersTemplate("s1", "LEX83064995", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Allinvalidrefernces\\ShipmentTrack" +
                    "ingTemplate.xlsx", "No data found for entered reference number(s).", ((string[])(null)));
#line hidden
        }
        
        public virtual void _31879_TestToVerifyTheUploadFunctionalityWithInvalidAndValidTrackingNumbers(string scenario, string validReferenceNumber, string path, string warningmessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "functional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("31879_test to verify the upload functionality with invalid and valid tracking num" +
                    "bers", @__tags);
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
testRunner.Given("I am a DLS user and launch crm url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
testRunner.And(string.Format("I enter the \'{0}\' in the search box", validReferenceNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
testRunner.When("I arrive on Tracking details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
testRunner.And("I click on upload button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
testRunner.And(string.Format("I attached the template from \"{0}\"", path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
testRunner.And("I click on submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
testRunner.Then(string.Format("I should be displayed with \'{0}\' for invalid tracking numbers and results for val" +
                        "id refrences \"{1}\"", warningmessage, path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("31879_test to verify the upload functionality with invalid and valid tracking num" +
            "bers: s1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tracking Page - Tracking Template Functionality - External Users")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("31879")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint76")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("functional")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "s1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:scenario", "s1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:validReferenceNumber", "LEX83064995")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:path", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Combinationofvalidandinvalid\\Ship" +
            "mentTrackingTemplate.xlsx")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:warningmessage", "Tracking details were not found for the following tracking numbers")]
        public virtual void _31879_TestToVerifyTheUploadFunctionalityWithInvalidAndValidTrackingNumbers_S1()
        {
#line 35
this._31879_TestToVerifyTheUploadFunctionalityWithInvalidAndValidTrackingNumbers("s1", "LEX83064995", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Combinationofvalidandinvalid\\Ship" +
                    "mentTrackingTemplate.xlsx", "Tracking details were not found for the following tracking numbers", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
