// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CRM.UITest.Scripts.Tracking.Tracking_UploadDownloadFuntionality
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class TrackingpageUploadShipmentTrackingTemplateFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TrackingpageUploadShipmentTrackingTemplate.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TrackingpageUploadShipmentTrackingTemplate", null, ProgrammingLanguage.CSharp, new string[] {
                        "Sprint60",
                        "TrackingDetailsPage-uploadFunctionality",
                        "18388"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "TrackingpageUploadShipmentTrackingTemplate")))
            {
                CRM.UITest.Scripts.Tracking.Tracking_UploadDownloadFuntionality.TrackingpageUploadShipmentTrackingTemplateFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void TestToVerifyTheTrackMultipleShipmentsByFileUploadAreaFieldsInDesktop(string username, string password, string trackingpage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GUI"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("test to verify the Track Multiple Shipments by File Upload area fields in desktop" +
                    "", @__tags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
testRunner.Given(string.Format("I am a DLS user and login into application with valid {0} and {1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
testRunner.And("I click on tracking module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
testRunner.When(string.Format("I will be navigated to \"{0}\"", trackingpage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
testRunner.Then("I will be displayed with Track Multiple Shipments by File Upload area with the al" +
                    "l fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("test to verify the Track Multiple Shipments by File Upload area fields in desktop" +
            ": zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TrackingpageUploadShipmentTrackingTemplate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint60")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TrackingDetailsPage-uploadFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:trackingpage", "Tracking")]
        public virtual void TestToVerifyTheTrackMultipleShipmentsByFileUploadAreaFieldsInDesktop_Zzz()
        {
            this.TestToVerifyTheTrackMultipleShipmentsByFileUploadAreaFieldsInDesktop("zzz", "Te$t1234", "Tracking", ((string[])(null)));
#line hidden
        }
        
        public virtual void TestToVerifyTheTrackMultipleShipmentsByFileUploadAreaFieldsInMobile(string username, string password, string trackingpage, string windowWidth, string windowHeight, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GUI"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("test to verify the Track Multiple Shipments by File Upload area fields in mobile", @__tags);
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
testRunner.Given(string.Format("I am a DLS user and login into application with valid {0} and {1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
testRunner.And("I click on tracking module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
testRunner.And(string.Format("I re-size the browser to mobile device \'{0}\' and  \'{1}\'", windowWidth, windowHeight), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
testRunner.When(string.Format("I will be navigated to \"{0}\"", trackingpage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
testRunner.Then("I should not be displayed with Track Multiple Shipments by File Upload area with " +
                    "the all fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("test to verify the Track Multiple Shipments by File Upload area fields in mobile:" +
            " Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TrackingpageUploadShipmentTrackingTemplate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint60")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TrackingDetailsPage-uploadFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:trackingpage", "Tracking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:WindowWidth", "768")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:WindowHeight", "640")]
        public virtual void TestToVerifyTheTrackMultipleShipmentsByFileUploadAreaFieldsInMobile_Variant0()
        {
            this.TestToVerifyTheTrackMultipleShipmentsByFileUploadAreaFieldsInMobile("zzz", "Te$t1234", "Tracking", "768", "640", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("test to verify the Track Multiple Shipments by File Upload area fields in mobile:" +
            " Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TrackingpageUploadShipmentTrackingTemplate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint60")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TrackingDetailsPage-uploadFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:trackingpage", "Tracking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:WindowWidth", "768")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:WindowHeight", "992")]
        public virtual void TestToVerifyTheTrackMultipleShipmentsByFileUploadAreaFieldsInMobile_Variant1()
        {
            this.TestToVerifyTheTrackMultipleShipmentsByFileUploadAreaFieldsInMobile("zzz", "Te$t1234", "Tracking", "768", "992", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("test to verify the Track Multiple Shipments by File Upload area fields in mobile:" +
            " Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TrackingpageUploadShipmentTrackingTemplate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint60")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TrackingDetailsPage-uploadFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:trackingpage", "Tracking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:WindowWidth", "992")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:WindowHeight", "1200")]
        public virtual void TestToVerifyTheTrackMultipleShipmentsByFileUploadAreaFieldsInMobile_Variant2()
        {
            this.TestToVerifyTheTrackMultipleShipmentsByFileUploadAreaFieldsInMobile("zzz", "Te$t1234", "Tracking", "992", "1200", ((string[])(null)));
#line hidden
        }
        
        public virtual void TestToVerifyTheUploadButtonFunctionalityForTrackingPage(string username, string password, string trackingpage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Functional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("test to verify the upload button functionality for tracking page", @__tags);
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
testRunner.Given(string.Format("I am a DLS user and login into application with valid {0} and {1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
testRunner.And("I click on tracking module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
testRunner.When(string.Format("I will be navigated to \"{0}\"", trackingpage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
testRunner.And("I click on upload button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
testRunner.Then("I should display with the upload shipments modal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("test to verify the upload button functionality for tracking page: zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TrackingpageUploadShipmentTrackingTemplate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint60")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TrackingDetailsPage-uploadFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Functional")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:trackingpage", "Tracking")]
        public virtual void TestToVerifyTheUploadButtonFunctionalityForTrackingPage_Zzz()
        {
            this.TestToVerifyTheUploadButtonFunctionalityForTrackingPage("zzz", "Te$t1234", "Tracking", ((string[])(null)));
#line hidden
        }
        
        public virtual void TestToVerifyTheFieldsOnUploadModalForTrackingPage(string username, string password, string trackingpage, string header, string subheader, string label, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GUI"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("test to verify the fields on upload modal for tracking page", @__tags);
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
testRunner.Given(string.Format("I am a DLS user and login into application with valid {0} and {1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
testRunner.And("I click on tracking module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
testRunner.When(string.Format("I will be navigated to \"{0}\"", trackingpage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
testRunner.And("I click on upload button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
testRunner.Then("I should display with the upload shipments modal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 48
testRunner.And(string.Format("I should be displayed \"Upload Shipments\" {0}", header), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
testRunner.And(string.Format("I should be displayed \"Select an Excel file to track up to 25 shipments\" {0}", subheader), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
testRunner.And(string.Format("I should be display with label no file Selected \"{0}\"", label), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
testRunner.And("I should be displayed with option to select file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
testRunner.And("I should have option to cancel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
testRunner.And("I should have option to submit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("test to verify the fields on upload modal for tracking page: zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TrackingpageUploadShipmentTrackingTemplate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint60")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TrackingDetailsPage-uploadFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:trackingpage", "Tracking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:header", "Upload Shipments")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:subheader", "Select an Excel file to track up to 25 shipments")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:label", "no file selected")]
        public virtual void TestToVerifyTheFieldsOnUploadModalForTrackingPage_Zzz()
        {
            this.TestToVerifyTheFieldsOnUploadModalForTrackingPage("zzz", "Te$t1234", "Tracking", "Upload Shipments", "Select an Excel file to track up to 25 shipments", "no file selected", ((string[])(null)));
#line hidden
        }
        
        public virtual void TestToVerifyTheCancelButtonFunctionalityOnUploadModalForTrackingPage(string username, string password, string trackingpage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Functional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("test to verify the cancel button functionality on upload modal for tracking page", @__tags);
#line 60
this.ScenarioSetup(scenarioInfo);
#line 61
testRunner.Given(string.Format("I am a DLS user and login into application with valid {0} and {1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 62
testRunner.And("I click on tracking module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
testRunner.When(string.Format("I will be navigated to \"{0}\"", trackingpage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 64
testRunner.And("I click on upload button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
testRunner.And("I displayed with upload modal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
testRunner.And("I click on cancel button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
testRunner.Then("upload modal should be closed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("test to verify the cancel button functionality on upload modal for tracking page:" +
            " zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TrackingpageUploadShipmentTrackingTemplate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint60")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TrackingDetailsPage-uploadFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Functional")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:trackingpage", "Tracking")]
        public virtual void TestToVerifyTheCancelButtonFunctionalityOnUploadModalForTrackingPage_Zzz()
        {
            this.TestToVerifyTheCancelButtonFunctionalityOnUploadModalForTrackingPage("zzz", "Te$t1234", "Tracking", ((string[])(null)));
#line hidden
        }
        
        public virtual void TestToVerifyTheUploadButtonFunctionalityWhenNoFilesAddedOnUploadModalForTrackingPage(string username, string password, string trackingPage, string errormessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GUI"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("test to verify the upload button functionality when no files added on upload moda" +
                    "l for tracking page", @__tags);
#line 74
this.ScenarioSetup(scenarioInfo);
#line 75
testRunner.Given(string.Format("I am a DLS user and login into application with valid {0} and {1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 76
testRunner.And("I click on tracking module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
testRunner.When(string.Format("I will be navigated to \"{0}\"", trackingPage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 78
testRunner.And("I click on upload button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
testRunner.And("I displayed with upload modal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
testRunner.And("I click on submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
testRunner.Then(string.Format("I should be displayed with \"PLEASE SELECT THE FILE\" {0}", errormessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("test to verify the upload button functionality when no files added on upload moda" +
            "l for tracking page: zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TrackingpageUploadShipmentTrackingTemplate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint60")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TrackingDetailsPage-uploadFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GUI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:tracking page", "Tracking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errormessage", "PLEASE SELECT THE FILE")]
        public virtual void TestToVerifyTheUploadButtonFunctionalityWhenNoFilesAddedOnUploadModalForTrackingPage_Zzz()
        {
            this.TestToVerifyTheUploadButtonFunctionalityWhenNoFilesAddedOnUploadModalForTrackingPage("zzz", "Te$t1234", "Tracking", "PLEASE SELECT THE FILE", ((string[])(null)));
#line hidden
        }
        
        public virtual void TestToVerifyTheUploadFunctionality(string username, string password, string trackingpage, string path, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Functional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("test to verify the upload functionality", @__tags);
#line 89
this.ScenarioSetup(scenarioInfo);
#line 90
testRunner.Given(string.Format("I am a DLS user and login into application with valid {0} and {1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 91
testRunner.And("I click on tracking module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
testRunner.When(string.Format("I will be navigated to \"{0}\"", trackingpage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 93
testRunner.And("I click on upload button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
testRunner.And(string.Format("I attached the template from \"{0}\"", path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
testRunner.Then("I should be able to upload the document", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("test to verify the upload functionality: zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TrackingpageUploadShipmentTrackingTemplate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint60")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TrackingDetailsPage-uploadFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Functional")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:trackingpage", "Tracking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:path", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Allvalidreferences\\ShipmentTracki" +
            "ngTemplate.xlsx")]
        public virtual void TestToVerifyTheUploadFunctionality_Zzz()
        {
            this.TestToVerifyTheUploadFunctionality("zzz", "Te$t1234", "Tracking", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Allvalidreferences\\ShipmentTracki" +
                    "ngTemplate.xlsx", ((string[])(null)));
#line hidden
        }
        
        public virtual void TestToVerifyTheUploadFunctionalityWithValidTrackingNumbers(string username, string password, string trackingpage, string path, string errormessage, string uploadedfilepath, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Acceptance",
                    "Functional",
                    "Regression",
                    "UploadTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("test to verify the upload functionality with valid tracking numbers", @__tags);
#line 103
this.ScenarioSetup(scenarioInfo);
#line 104
testRunner.Given(string.Format("I am a DLS user and login into application with valid {0} and {1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 105
testRunner.And("I click on tracking module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
testRunner.When(string.Format("I will be navigated to \"{0}\"", trackingpage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 107
testRunner.And("I click on upload button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
testRunner.And(string.Format("I attached the template from \"{0}\"", path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
testRunner.And("I click on submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
testRunner.Then("I should navigate to tracking details screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 111
testRunner.And(string.Format("I should see the results of tracking numbers for \'{0}\'", uploadedfilepath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("test to verify the upload functionality with valid tracking numbers: crmSystemAdm" +
            "in")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TrackingpageUploadShipmentTrackingTemplate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint60")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TrackingDetailsPage-uploadFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Acceptance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Functional")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UploadTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "crmSystemAdmin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "crmSystemAdmin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:trackingpage", "Tracking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:path", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Allvalidreferences\\ShipmentTracki" +
            "ngTemplate.xlsx")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errormessage", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:uploadedfilepath", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Allvalidreferences\\ShipmentTracki" +
            "ngTemplate.xlsx")]
        public virtual void TestToVerifyTheUploadFunctionalityWithValidTrackingNumbers_CrmSystemAdmin()
        {
            this.TestToVerifyTheUploadFunctionalityWithValidTrackingNumbers("crmSystemAdmin", "Te$t1234", "Tracking", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Allvalidreferences\\ShipmentTracki" +
                    "ngTemplate.xlsx", "", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Allvalidreferences\\ShipmentTracki" +
                    "ngTemplate.xlsx", ((string[])(null)));
#line hidden
        }
        
        public virtual void TestToVerifyTheUploadFunctionalityWithInvalidFileName(string username, string password, string trackingpage, string path, string errorforinvalidname, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Acceptance"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("test to verify the upload functionality with invalid file name", @__tags);
#line 119
this.ScenarioSetup(scenarioInfo);
#line 120
testRunner.Given(string.Format("I am a DLS user and login into application with valid {0} and {1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 121
testRunner.And("I click on tracking module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
testRunner.When(string.Format("I will be navigated to \"{0}\"", trackingpage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
testRunner.And("I click on upload button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
testRunner.And(string.Format("I attached the template from \"{0}\"", path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
testRunner.And("I click on submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
testRunner.Then(string.Format("I should be display with \"{0}\" invalidinput message popup", errorforinvalidname), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("test to verify the upload functionality with invalid file name: zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TrackingpageUploadShipmentTrackingTemplate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint60")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TrackingDetailsPage-uploadFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Acceptance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:trackingpage", "Tracking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:path", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Invalidfilename\\TrackingDetails.x" +
            "ls")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorforinvalidname", "Invalid input file.")]
        public virtual void TestToVerifyTheUploadFunctionalityWithInvalidFileName_Zzz()
        {
            this.TestToVerifyTheUploadFunctionalityWithInvalidFileName("zzz", "Te$t1234", "Tracking", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Invalidfilename\\TrackingDetails.x" +
                    "ls", "Invalid input file.", ((string[])(null)));
#line hidden
        }
        
        public virtual void TestToVerifyTheUploadFunctionalityWithInvalidExtension(string username, string password, string trackingpage, string path, string errorforinvalidname, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Acceptance"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test to verify the upload functionality with invalid extension", @__tags);
#line 133
this.ScenarioSetup(scenarioInfo);
#line 134
testRunner.Given(string.Format("I am a DLS user and login into application with valid {0} and {1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 135
testRunner.And("I click on tracking module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 136
testRunner.When(string.Format("I will be navigated to \"{0}\"", trackingpage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 137
testRunner.And("I click on upload button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
testRunner.And(string.Format("I attached the template from \"{0}\"", path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 139
testRunner.And("I click on submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
testRunner.Then(string.Format("I should be display with \"{0}\" invalidinput message popup", errorforinvalidname), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Test to verify the upload functionality with invalid extension: zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TrackingpageUploadShipmentTrackingTemplate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint60")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TrackingDetailsPage-uploadFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Acceptance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:trackingpage", "Tracking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:path", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Invalidextension\\test.PNG")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorforinvalidname", "Invalid input file.")]
        public virtual void TestToVerifyTheUploadFunctionalityWithInvalidExtension_Zzz()
        {
            this.TestToVerifyTheUploadFunctionalityWithInvalidExtension("zzz", "Te$t1234", "Tracking", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Invalidextension\\test.PNG", "Invalid input file.", ((string[])(null)));
#line hidden
        }
        
        public virtual void TestToVerifyTheUploadFunctionalityWithMoreThan25RefenceNumbers(string username, string password, string trackingpage, string path, string messageformax, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Acceptance"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test to verify the upload functionality with more than 25 refence numbers", @__tags);
#line 147
this.ScenarioSetup(scenarioInfo);
#line 148
testRunner.Given(string.Format("I am a DLS user and login into application with valid {0} and {1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 149
testRunner.And("I click on tracking module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
testRunner.When(string.Format("I will be navigated to \"{0}\"", trackingpage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 151
testRunner.And("I click on upload button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
testRunner.And(string.Format("I attached the template from \"{0}\"", path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 153
testRunner.And("I click on submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 154
testRunner.Then(string.Format("I should display with the error poup for more than maximum \"{0}\"", messageformax), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Test to verify the upload functionality with more than 25 refence numbers: zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TrackingpageUploadShipmentTrackingTemplate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint60")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TrackingDetailsPage-uploadFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Acceptance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:trackingpage", "Tracking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:path", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Morethan25refernces\\ShipmentTrack" +
            "ingTemplate.xlsx")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:messageformax", "This file exceeds the maximum of 25 tracking numbers")]
        public virtual void TestToVerifyTheUploadFunctionalityWithMoreThan25RefenceNumbers_Zzz()
        {
            this.TestToVerifyTheUploadFunctionalityWithMoreThan25RefenceNumbers("zzz", "Te$t1234", "Tracking", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Morethan25refernces\\ShipmentTrack" +
                    "ingTemplate.xlsx", "This file exceeds the maximum of 25 tracking numbers", ((string[])(null)));
#line hidden
        }
        
        public virtual void TestToVerifyTheUploadFunctionalityWithEmptyFile(string username, string password, string trackingpage, string path, string errormessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Acceptance"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("test to verify the upload functionality with empty file", @__tags);
#line 161
this.ScenarioSetup(scenarioInfo);
#line 162
testRunner.Given(string.Format("I am a DLS user and login into application with valid {0} and {1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 163
testRunner.And("I click on tracking module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
testRunner.When(string.Format("I will be navigated to \"{0}\"", trackingpage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 165
testRunner.And("I click on upload button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
testRunner.And(string.Format("I attached the template from \"{0}\"", path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 167
testRunner.And("I click on submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 168
testRunner.Then(string.Format("I should be able to see the \"{0}\" saying there are no tracking numbers", errormessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("test to verify the upload functionality with empty file: zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TrackingpageUploadShipmentTrackingTemplate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint60")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TrackingDetailsPage-uploadFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Acceptance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:trackingpage", "Tracking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:path", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Emptyfile\\ShipmentTrackingTemplat" +
            "e.xlsx")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errormessage", "Uploaded file does not contain any tracking numbers. Enter tracking number and up" +
            "load file.")]
        public virtual void TestToVerifyTheUploadFunctionalityWithEmptyFile_Zzz()
        {
            this.TestToVerifyTheUploadFunctionalityWithEmptyFile("zzz", "Te$t1234", "Tracking", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Emptyfile\\ShipmentTrackingTemplat" +
                    "e.xlsx", "Uploaded file does not contain any tracking numbers. Enter tracking number and up" +
                    "load file.", ((string[])(null)));
#line hidden
        }
        
        public virtual void TestToVerifyTheUploadFunctionalityWithInvalidAndValidTrackingNumbers(string username, string password, string trackingpage, string path, string errormessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "functional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("test to verify the upload functionality with invalid and valid tracking numbers", @__tags);
#line 177
this.ScenarioSetup(scenarioInfo);
#line 178
testRunner.Given(string.Format("I am a DLS user and login into application with valid {0} and {1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 179
testRunner.And("I click on tracking module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 180
testRunner.When(string.Format("I will be navigated to \"{0}\"", trackingpage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 181
testRunner.And("I click on upload button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 182
testRunner.And(string.Format("I attached the template from \"{0}\"", path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
testRunner.And("I click on submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 184
testRunner.Then(string.Format("I should be displayed with \'{0}\' for invalid tracking numbers and results for val" +
                        "id refrences \"{1}\"", errormessage, path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("test to verify the upload functionality with invalid and valid tracking numbers: " +
            "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TrackingpageUploadShipmentTrackingTemplate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint60")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TrackingDetailsPage-uploadFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("functional")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:trackingpage", "Tracking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:path", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Combinationofvalidandinvalid\\Ship" +
            "mentTrackingTemplate.xlsx")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errormessage", "Tracking details were not found for the following tracking numbers")]
        public virtual void TestToVerifyTheUploadFunctionalityWithInvalidAndValidTrackingNumbers_Zzz()
        {
            this.TestToVerifyTheUploadFunctionalityWithInvalidAndValidTrackingNumbers("zzz", "Te$t1234", "Tracking", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Combinationofvalidandinvalid\\Ship" +
                    "mentTrackingTemplate.xlsx", "Tracking details were not found for the following tracking numbers", ((string[])(null)));
#line hidden
        }
        
        public virtual void TestToVerifyTheUploadFunctionalityWithInvalidTrackingNumbersTemplate(string username, string password, string trackingpage, string path, string errorforallinvalid, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Functional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("test to verify the upload functionality with invalid tracking numbers template", @__tags);
#line 193
this.ScenarioSetup(scenarioInfo);
#line 194
testRunner.Given(string.Format("I am a DLS user and login into application with valid {0} and {1}", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 195
testRunner.And("I click on tracking module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 196
testRunner.When(string.Format("I will be navigated to \"{0}\"", trackingpage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 197
testRunner.And("I click on upload button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 198
testRunner.And(string.Format("I attached the template from \"{0}\"", path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 199
testRunner.And("I click on submit button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 200
testRunner.Then(string.Format("I should display with \'{0}\' popup for all invaliddata", errorforallinvalid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("test to verify the upload functionality with invalid tracking numbers template: z" +
            "zz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "TrackingpageUploadShipmentTrackingTemplate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint60")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TrackingDetailsPage-uploadFunctionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("18388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Functional")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Username", "zzz")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Password", "Te$t1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:trackingpage", "Tracking")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:path", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Allinvalidrefernces\\ShipmentTrack" +
            "ingTemplate.xlsx")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorforallinvalid", "No data found for entered reference number(s).")]
        public virtual void TestToVerifyTheUploadFunctionalityWithInvalidTrackingNumbersTemplate_Zzz()
        {
            this.TestToVerifyTheUploadFunctionalityWithInvalidTrackingNumbersTemplate("zzz", "Te$t1234", "Tracking", "..\\..\\Scripts\\TestData\\Testfiles_trackingupload\\Allinvalidrefernces\\ShipmentTrack" +
                    "ingTemplate.xlsx", "No data found for entered reference number(s).", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
