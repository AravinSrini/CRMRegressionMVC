// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CRM.UITest.Scripts.Shipment.AddShipment.LTL.ShipmentResults
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
    public partial class GainshareCustomerPricingMarkupCalculation_ShipmentResultsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Gainshare Customer Pricing Markup Calculation - Shipment Results.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Gainshare Customer Pricing Markup Calculation - Shipment Results", null, ProgrammingLanguage.CSharp, new string[] {
                        "Sprint72",
                        "33799",
                        "Ignore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Gainshare Customer Pricing Markup Calculation - Shipment Results")))
            {
                CRM.UITest.Scripts.Shipment.AddShipment.LTL.ShipmentResults.GainshareCustomerPricingMarkupCalculation_ShipmentResultsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void VerifyCustomerChargesForShipmentRequestAreCalculatedBasedOnNewRatingCalculation(
                    string customerName, 
                    string userType, 
                    string pickUpCityName, 
                    string pickUpZipCode, 
                    string pickUpStateCode, 
                    string pickUpCountry, 
                    string dropUpCityName, 
                    string dropUpZipCode, 
                    string dropUpStateCode, 
                    string dropUpCountry, 
                    string oAccessorial, 
                    string dAccessorial, 
                    string freightClass, 
                    string quantity, 
                    string quantityUnit, 
                    string weight, 
                    string weightUnit, 
                    string oName, 
                    string oAdd1, 
                    string dName, 
                    string dAdd1, 
                    string nmfc, 
                    string desc, 
                    string calculationType, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Functional"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Customer charges for Shipment Request are calculated based on new rating c" +
                    "alculation", @__tags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
testRunner.Given("I am a DLS user belongs to Gainshare Customer and login into application with val" +
                    "id <Username> and <Password>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
testRunner.When(string.Format("I am on the Shipment results page{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}{1" +
                        "4}{15}{16}{17}{18}{19}{20}{21}{22}", customerName, userType, pickUpCityName, pickUpZipCode, pickUpStateCode, pickUpCountry, dropUpCityName, dropUpZipCode, dropUpStateCode, dropUpCountry, oAccessorial, dAccessorial, freightClass, quantity, quantityUnit, weight, weightUnit, oName, oAdd1, dName, dAdd1, nmfc, desc), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
testRunner.Then(string.Format("the Customer charges will be calculated based on Bump and Surge and verified in t" +
                        "he Shipment results page{0}{1}{2}", customerName, userType, calculationType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
